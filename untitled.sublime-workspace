{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ed",
				"edge"
			],
			[
				"tart",
				"target_link_libraries\tcommand"
			],
			[
				"in",
				"include"
			],
			[
				"add",
				"add_library\tcommand"
			]
		]
	},
	"buffers":
	[
		{
			"file": "dataset.py",
			"settings":
			{
				"buffer_size": 5684,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/0dataset/weigthing/collect.py",
			"settings":
			{
				"buffer_size": 878,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tfidf.py",
			"settings":
			{
				"buffer_size": 3598,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mehran/Downloads/bars-solid.svg",
			"settings":
			{
				"buffer_size": 551,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import numpy as np\nimport math\n\ndef stat(DS,new_DS,num_vocab,treshold):\n    g = open(\"statictics.txt\", \"w\")\n    g.write(\"number of documents: \" + str(num_doc) + \"\\n\")\n    g.write(\"size of vocabulary: \" + str(num_vocab) + \"\\n\")\n    avg_len = 0.0\n    max_len = 0\n    min_len = 10000\n    zero_doc=0\n    for doc in DS:\n        l = len(doc)\n        avg_len += l\n        if l > max_len:\n            max_len = l\n        if l < min_len:\n            min_len = l\n    g.write(\"average document lenght: \" + str(float(avg_len / num_doc)) + \"\\n\")\n    g.write(\"maximum document lenght: \" + str(max_len) + \"\\n\")\n    g.write(\"minimum document lenght: \" + str(min_len) + \"\\n\")\n    g.write(\"size of removed words: \" + str(num_vocab - treshold) + \"\\n\")\n    g.write(\"\\t*****\\tafter remove words\\t*****\\n \")\n    avg_len = 0.0\n    max_len = 0\n    min_len = 10000\n    under5=0\n    under10=0\n    for doc in new_DS:\n        l = len(doc)\n        avg_len += l\n        if l > max_len:\n            max_len = l\n        if l < min_len:\n            min_len = l\n        if l < 5:\n            under5+=1\n        if l < 10:\n            under10+=1\n    g.write(\"average document lenght: \" + str(float(avg_len / num_doc)) + \"\\n\")\n    g.write(\"maximum document lenght: \" + str(max_len) + \"\\n\")\n    g.write(\"minimum document lenght: \" + str(min_len) + \"\\n\")\n    g.write(\"document lenght under 5: \" + str(under5) + \"\\n\")\n    g.write(\"document lenght under 10: \" + str(under10) + \"\\n\")\n    g.close()\n\n\nif __name__ == '__main__':\n    treshold=20000\n    removeDoctreshold=5\n    f=open(\"final_DS.txt\",\"r\")\n    DS=[]\n    # DS_word=[]\n    for line in f:\n        WC={}\n        # W=[]\n        for item in line.strip().split(\" \"):\n            if not item.strip()==\"\":\n                WC[int(item.strip().split(\":\")[0])]=int(item.strip().split(\":\")[1])\n            # W.append(int(item.strip().split(\":\")[0]))\n        # DS_word.append()\n        DS.append(WC)\n    f.close()\n    f=open(\"vocab.txt\",\"r\")\n    vocab=[]\n    for line in f:\n        vocab.append(line.strip())\n    f.close()\n    num_vocab=len(vocab)\n    num_doc=len(DS)\n    tf=np.zeros(num_vocab).tolist()\n    df=np.zeros(num_vocab).tolist()\n    tf_idf = np.zeros(num_vocab).tolist()\n    for doc in DS:\n        for word,count in doc.items():\n            tf[word]+=count\n            df[word]+=1\n    for i in range(num_vocab):\n        tf_idf[i]= math.log(tf[i])*math.log(float(num_doc/df[i]))\n    new_vocab=[]\n    vocab_new_id=(np.zeros(num_vocab)-1).tolist()\n    index=-1\n    for id in np.argsort(tf_idf).tolist()[::-1][:treshold]:\n        index+=1\n        new_vocab.append(vocab[id])\n        vocab_new_id[id]=index\n    new_DS=[]\n    new_DS_text=[]\n    ids=open(\"ids\")\n    idfiles=ids.read()\n    idlines=idfiles.split('\\n')\n    newiddocs=[]\n    docCount=0\n    for doc in DS:\n        WC={}\n        valid=0\n        t=\"\"\n        for word,count in doc.items():\n            if not vocab_new_id[word]==-1:\n                n=vocab_new_id[word]\n                WC[n]=count\n                t+=str(n)+\":\"+str(count)+\" \"\n                valid+=1\n        new_DS.append(WC)\n        if valid>removeDoctreshold :\n            newiddocs.append(idlines[docCount])\n            new_DS_text.append(str(valid)+\" \"+t.strip())\n        docCount+=1\n    g=open(\"new_DS.txt\",\"w\")\n    for doc in new_DS_text:\n        g.write(doc+\"\\n\")\n    g.close()\n    g=open(\"new_ids.txt\",\"w\")\n    for doc in newiddocs:\n        g.write(doc+\"\\n\")\n    g.close()\n    g=open(\"new_vocab.txt\",\"w\")\n    for v in new_vocab:\n        g.write(v.strip()+\"\\n\")\n    g.close()\n    stat(DS,new_DS,num_vocab,treshold)",
			"settings":
			{
				"buffer_size": 3558,
				"line_ending": "Unix",
				"name": "import numpy as np"
			}
		},
		{
			"file": "tmt/example-perplexity.scala",
			"settings":
			{
				"buffer_size": 2406,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "finalDS.txt",
			"settings":
			{
				"buffer_size": 123515,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"MainProject (Linux)",
					""
				],
				[
					"MainProject (Linux)",
					"clean"
				],
				[
					"MainProject (Linux)",
					"install/strip"
				],
				[
					"MainProject (Linux)",
					"install/local"
				],
				[
					"MainProject (Linux)",
					"test"
				],
				[
					"MainProject (Linux)",
					"list_install_components"
				],
				[
					"MainProject (Linux)",
					"MainProject"
				],
				[
					"MainProject (Linux)",
					"install"
				],
				[
					"MainProject (Linux)",
					"rebuild_cache"
				],
				[
					"MainProject (Linux)",
					"domlib"
				],
				[
					"MainProject (Linux)",
					"wildriver"
				],
				[
					"MainProject (Linux)",
					"mtmetis_bin"
				],
				[
					"MainProject (Linux)",
					"mtmetis"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.o"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.i"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.s"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.o"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.i"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.s"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.o"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.i"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.s"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.o"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.i"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.s"
				]
			],
			[
				"MainProject (Linux)",
				""
			]
		],
		[
			[
				[
					"MainProject (Linux)",
					""
				],
				[
					"MainProject (Linux)",
					"clean"
				],
				[
					"MainProject (Linux)",
					"install/strip"
				],
				[
					"MainProject (Linux)",
					"install/local"
				],
				[
					"MainProject (Linux)",
					"test"
				],
				[
					"MainProject (Linux)",
					"list_install_components"
				],
				[
					"MainProject (Linux)",
					"MainProject"
				],
				[
					"MainProject (Linux)",
					"install"
				],
				[
					"MainProject (Linux)",
					"rebuild_cache"
				],
				[
					"MainProject (Linux)",
					"wildriver"
				],
				[
					"MainProject (Linux)",
					"mtmetis_bin"
				],
				[
					"MainProject (Linux)",
					"mtmetis"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.o"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.i"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.s"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.o"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.i"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.s"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.o"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.i"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.s"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.o"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.i"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.s"
				]
			],
			[
				"MainProject (Linux)",
				""
			]
		],
		[
			[
				[
					"MainProject (Linux)",
					""
				],
				[
					"MainProject (Linux)",
					"clean"
				],
				[
					"MainProject (Linux)",
					"rebuild_cache"
				],
				[
					"MainProject (Linux)",
					"MainProject"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.o"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.i"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.s"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.o"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.i"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.s"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.o"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.i"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.s"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.o"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.i"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.s"
				]
			],
			[
				"MainProject (Linux)",
				""
			]
		],
		[
			[
				[
					"MainProject (Linux)",
					""
				],
				[
					"MainProject (Linux)",
					"clean"
				],
				[
					"MainProject (Linux)",
					"rebuild_cache"
				],
				[
					"MainProject (Linux)",
					"MainProject"
				],
				[
					"MainProject (Linux)",
					"test"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.o"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.i"
				],
				[
					"MainProject (Linux)",
					"main/SymSnap.s"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.o"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.i"
				],
				[
					"MainProject (Linux)",
					"main/stdafx.s"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.o"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.i"
				],
				[
					"MainProject (Linux)",
					"main/testgraph.s"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.o"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.i"
				],
				[
					"MainProject (Linux)",
					"snap/snap-core/Snap.s"
				]
			],
			[
				"MainProject (Linux)",
				"test"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 128.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 533.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/mehran/newstart"
	],
	"file_history":
	[
		"/home/mehran/Documents/Projects/CLionProjects/MSFinalProject/datasetRefine/refinePapersById.cpp",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/0dataset/preprocess/prep.py",
		"/home/mehran/newstart/stopwords.txt",
		"/home/mehran/.config/sublime-text-3/Packages/User/mypython.sublime-build",
		"/home/mehran/.config/sublime-text-3/Cache/Python 3/Python3.tmLanguage.cache",
		"/usr/local/lib64/python3.6/site-packages/scipy/misc/doccer.py",
		"/usr/local/lib/python3.6/site-packages/nltk/collocations.py",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/1extract weights/0corpus/only numbers/tfidf.py",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/0dataset/mult/dataset.py",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/1extract weights/0corpus/tfidf.py",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/IUST-Thesis/dicen2fa.tex",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/IUST-Thesis/main.tex",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/IUST-Thesis/appendix1.tex",
		"/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/IUST-Thesis/faTitle.tex",
		"/home/mehran/Documents/Projects/CLionProjects/MSFinalProject/dataset",
		"/home/mehran/Downloads/SP_Flash_Tool_v5.1628_Win.zip",
		"/home/mehran/Downloads/Logo_img_Maker_Linux/logobin/logo_gen.py",
		"/home/mehran/Downloads/Logo_img_Maker_Linux/makeLogo.sh",
		"/home/mehran/Downloads/Logo_img_Maker_Windows/bin/logo_gen.py",
		"/home/mehran/Downloads/jenkins-material-theme(1).css",
		"/home/mehran/Downloads/mapreduce.py",
		"/home/mehran/Downloads/newmapreduce.py",
		"/home/mehran/Desktop/mapreduce.py",
		"/home/mehran/Desktop/x.csv",
		"/home/mehran/Desktop/save.py",
		"/home/mehran/Documents/nafas/graph.py",
		"/run/media/mehran/New Volume/Users/Mehran/tar/training/.outmerge.txt.crc",
		"/home/mehran/Downloads/(The Morgan Kaufmann Series in Computer Architecture and Design) John L. Hennessy, David A. Patterson-Computer Architecture, Sixth Edition_ A Quantitative Approach-Morgan Kaufmann (2017).pdf",
		"/home/mehran/Downloads/George Orwell-Animal Farm_ Centennial Edition-Plume (2003).epub",
		"/run/media/mehran/New Volume/Users/Mehran/MAC OS X 10.10 YOSEMITE VER 2015/MAC OS X 10.10 YOSEMITE VER 2015.nvram",
		"/home/mehran/Documents/MainProject/clustering/lib/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MTMETIS/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MTMETIS/domlib/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MTMETIS/src/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MTMETIS/wildriver/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MTMETIS/domlib/dlthread.c",
		"/home/mehran/Documents/MainProject/MTMETIS/include/CMakeLists.txt",
		"/home/mehran/Documents/MainProject/MainProject.sublime-project",
		"/home/mehran/Documents/MainProject/snap/glib-core/fl.cpp",
		"/home/mehran/Documents/GitAdd/MainProject/snap/glib-core/fl.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"iter",
			"tag_tok",
			"exep",
			"scentence",
			"print",
			"unicode_literals"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "dataset.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5684,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 286.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/run/media/mehran/New Volume/Users/Mehran/Documents/MainProject/Codes/degree discounted/0dataset/weigthing/collect.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 878,
						"regions":
						{
						},
						"selection":
						[
							[
								340,
								340
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 591.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tfidf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3598,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1197.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/mehran/Downloads/bars-solid.svg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 551,
						"regions":
						{
						},
						"selection":
						[
							[
								551,
								551
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3558,
						"regions":
						{
						},
						"selection":
						[
							[
								32,
								32
							]
						],
						"settings":
						{
							"auto_name": "import numpy as np",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tmt/example-perplexity.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2406,
						"regions":
						{
						},
						"selection":
						[
							[
								1627,
								1627
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "finalDS.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123515,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 468.0
	},
	"output.files_to_be_deleted":
	{
		"height": 114.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/mypython.sublime-build",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 337.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
